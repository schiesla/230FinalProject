Lucas Weier, Logan Schiessle, Anthony De Rada
The Map Brothers

What follows is a concise description and justification of each of the data structures we will be using in our design.

  Each POI (Point of Interest) class will have an instance of an ArrayList.  This ArrayList will hold that POI’s neighboring POIs.  We decided an ArrayList would be best for holding the neighbors, considering the neighbors do not need to be in any specific order and we do not have to search through the neighbors at any time.
  The Map class will have a HashMap with keys of type “String”.  These String keys have values of type POI, and the keys match with the names of the POI.  The HashMap is useful because user input is a String, which does not directly give us the corresponding POI.  The HashMap connects the String given to the POI the String refers to.
  The Map class also has a RedBlackTree, which orders the ratings of each POI.  A RedBlackTree is best here because the ratings need to be sorted and searched for.
  There is a method in the Map class that is named “shortestPath” which is given two POIs and returns a LinkedList of POIs.  This LinkedList is the shortest distance that can be traveled to get from one POI to the other.  The reason we chose to use a LinkedList here instead of a different data structure such as an ArrayList is because order matters when returning the shortest path from beginning POI to ending POI, and POIs can be quickly and easily inserted/deleted between other POIs in a LinkedList.
  This method will also create and utilize a PriorityQueue that uses a Min-Heap.  The PriorityQueue contains POIs’ neighbors, and POIs are popped off the Queue in the correct order for the shortest route.  POIs that are popped off the Queue are placed into the LinkedList that is returned from this method.
